// +build !ignore_autogenerated

// Copyright Jetstack Ltd. See LICENSE for details.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.AmazonESProxy":                                      schema_pkg_apis_cluster_v1alpha1_AmazonESProxy(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Cluster":                                            schema_pkg_apis_cluster_v1alpha1_Cluster(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterAmazon":                                      schema_pkg_apis_cluster_v1alpha1_ClusterAmazon(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetes":                                  schema_pkg_apis_cluster_v1alpha1_ClusterKubernetes(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServer":                         schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesAPIServer(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerAmazon":                   schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesAPIServerAmazon(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerAmazonAccessLogs":         schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesAPIServerAmazonAccessLogs(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerOIDC":                     schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesAPIServerOIDC(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesClusterAutoscaler":                 schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesClusterAutoscaler(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesClusterAutoscalerOverprovisioning": schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesClusterAutoscalerOverprovisioning(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesDashboard":                         schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesDashboard(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesPrometheus":                        schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesPrometheus(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesTiller":                            schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesTiller(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterList":                                        schema_pkg_apis_cluster_v1alpha1_ClusterList(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterPodSecurityPolicy":                           schema_pkg_apis_cluster_v1alpha1_ClusterPodSecurityPolicy(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.EgressRule":                                         schema_pkg_apis_cluster_v1alpha1_EgressRule(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Firewall":                                           schema_pkg_apis_cluster_v1alpha1_Firewall(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.HTTPBasicAuth":                                      schema_pkg_apis_cluster_v1alpha1_HTTPBasicAuth(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.IngressRule":                                        schema_pkg_apis_cluster_v1alpha1_IngressRule(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePool":                                       schema_pkg_apis_cluster_v1alpha1_InstancePool(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePoolAmazon":                                 schema_pkg_apis_cluster_v1alpha1_InstancePoolAmazon(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePoolKubernetes":                             schema_pkg_apis_cluster_v1alpha1_InstancePoolKubernetes(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InternetGW":                                         schema_pkg_apis_cluster_v1alpha1_InternetGW(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.KubernetesAPI":                                      schema_pkg_apis_cluster_v1alpha1_KubernetesAPI(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Label":                                              schema_pkg_apis_cluster_v1alpha1_Label(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.LoggingSink":                                        schema_pkg_apis_cluster_v1alpha1_LoggingSink(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.LoggingSinkElasticSearch":                           schema_pkg_apis_cluster_v1alpha1_LoggingSinkElasticSearch(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Network":                                            schema_pkg_apis_cluster_v1alpha1_Network(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.SSH":                                                schema_pkg_apis_cluster_v1alpha1_SSH(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Shared":                                             schema_pkg_apis_cluster_v1alpha1_Shared(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Subnet":                                             schema_pkg_apis_cluster_v1alpha1_Subnet(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Taint":                                              schema_pkg_apis_cluster_v1alpha1_Taint(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Values":                                             schema_pkg_apis_cluster_v1alpha1_Values(ref),
		"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Volume":                                             schema_pkg_apis_cluster_v1alpha1_Volume(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterApplyFlags":                                   schema_pkg_apis_tarmak_v1alpha1_ClusterApplyFlags(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterDestroyFlags":                                 schema_pkg_apis_tarmak_v1alpha1_ClusterDestroyFlags(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterFlags":                                        schema_pkg_apis_tarmak_v1alpha1_ClusterFlags(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Config":                                              schema_pkg_apis_tarmak_v1alpha1_Config(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ConfigList":                                          schema_pkg_apis_tarmak_v1alpha1_ConfigList(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Environment":                                         schema_pkg_apis_tarmak_v1alpha1_Environment(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.EnvironmentList":                                     schema_pkg_apis_tarmak_v1alpha1_EnvironmentList(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Flags":                                               schema_pkg_apis_tarmak_v1alpha1_Flags(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Image":                                               schema_pkg_apis_tarmak_v1alpha1_Image(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Provider":                                            schema_pkg_apis_tarmak_v1alpha1_Provider(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderAmazon":                                      schema_pkg_apis_tarmak_v1alpha1_ProviderAmazon(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderAzure":                                       schema_pkg_apis_tarmak_v1alpha1_ProviderAzure(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderGCP":                                         schema_pkg_apis_tarmak_v1alpha1_ProviderGCP(ref),
		"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderList":                                        schema_pkg_apis_tarmak_v1alpha1_ProviderList(ref),
		"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.Instance":                                              schema_pkg_apis_wing_v1alpha1_Instance(ref),
		"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceList":                                          schema_pkg_apis_wing_v1alpha1_InstanceList(ref),
		"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceSpec":                                          schema_pkg_apis_wing_v1alpha1_InstanceSpec(ref),
		"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceSpecManifest":                                  schema_pkg_apis_wing_v1alpha1_InstanceSpecManifest(ref),
		"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceStatus":                                        schema_pkg_apis_wing_v1alpha1_InstanceStatus(ref),
		"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceStatusManifest":                                schema_pkg_apis_wing_v1alpha1_InstanceStatusManifest(ref),
	}
}

func schema_pkg_apis_cluster_v1alpha1_AmazonESProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Cluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"cloudId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instancePools": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePool"),
									},
								},
							},
						},
					},
					"cloud": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"location": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Network"),
						},
					},
					"loggingSinks": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.LoggingSink"),
									},
								},
							},
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Values"),
						},
					},
					"kubernetesAPI": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.KubernetesAPI"),
						},
					},
					"groupIdentifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetes"),
						},
					},
					"amazon": {
						SchemaProps: spec.SchemaProps{
							Description: "Amazon specific options",
							Ref:         ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterAmazon"),
						},
					},
				},
				Required: []string{"amazon"},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterAmazon", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetes", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePool", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.KubernetesAPI", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.LoggingSink", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Network", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Values", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterAmazon(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Amazon specific settings for that instance pool",
				Properties: map[string]spec.Schema{
					"additionalIAMPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "This fields contains ARNs for additional IAM policies to be added to this instance pool",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetes(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"podCIDR": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"serviceCIDR": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusterAutoscaler": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesClusterAutoscaler"),
						},
					},
					"tiller": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesTiller"),
						},
					},
					"dashboard": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesDashboard"),
						},
					},
					"apiServer": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServer"),
						},
					},
					"podSecurityPolicy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterPodSecurityPolicy"),
						},
					},
					"prometheus": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesPrometheus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServer", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesClusterAutoscaler", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesDashboard", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesPrometheus", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesTiller", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterPodSecurityPolicy"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesAPIServer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"public": {
						SchemaProps: spec.SchemaProps{
							Description: "expose the API server through a public load balancer",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowCIDRs": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"oidc": {
						SchemaProps: spec.SchemaProps{
							Description: "OIDC",
							Ref:         ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerOIDC"),
						},
					},
					"amazon": {
						SchemaProps: spec.SchemaProps{
							Description: "AWS specifc options",
							Ref:         ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerAmazon"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerAmazon", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerOIDC"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesAPIServerAmazon(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"publicELBAccessLogs": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerAmazonAccessLogs"),
						},
					},
					"internalELBAccessLogs": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerAmazonAccessLogs"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesAPIServerAmazonAccessLogs"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesAPIServerAmazonAccessLogs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"bucket": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bucketPrefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"interval": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesAPIServerOIDC(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"clientID": {
						SchemaProps: spec.SchemaProps{
							Description: "The client ID for the OpenID Connect client, must be set if oidc-issuer-url is set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groupsClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "If provided, the name of a custom OpenID Connect claim for specifying user groups. The claim value is expected to be a string or array of strings. This flag is experimental, please see the authentication documentation for further details.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groupsPrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "If provided, all groups will be prefixed with this value to prevent conflicts with other authentication strategies.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"issuerURL": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the OpenID issuer, only HTTPS scheme will be accepted. If set, it will be used to verify the OIDC JSON Web Token (JWT).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"signingAlgs": {
						SchemaProps: spec.SchemaProps{
							Description: "Comma-separated list of allowed JOSE asymmetric signing algorithms. JWTs with a 'alg' header value not in this list will be rejected. Values are defined by RFC 7518 https://tools.ietf.org/html/rfc7518#section-3.1. (default [RS256])",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"usernameClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "The OpenID claim to use as the user name. Note that claims other than the default ('sub') is not guaranteed to be unique and immutable. This flag is experimental, please see the authentication documentation for further details. (default \"sub\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usernamePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "If provided, all usernames will be prefixed with this value. If not provided, username claims other than 'email' are prefixed by the issuer URL to avoid clashes. To skip any prefixing, provide the value '-'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesClusterAutoscaler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"scaleDownUtilizationThreshold": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"overprovisioning": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesClusterAutoscalerOverprovisioning"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.ClusterKubernetesClusterAutoscalerOverprovisioning"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesClusterAutoscalerOverprovisioning(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"reservedMillicoresPerReplica": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"reservedMegabytesPerReplica": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"coresPerReplica": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"nodesPerReplica": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"replicaCount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesDashboard(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesPrometheus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Configure the cluster internal deployment of prometheus",
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable a cluster internal prometheus deployment, default: true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Mode defines which components are installed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterKubernetesTiller(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Cluster"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Cluster", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_ClusterPodSecurityPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_EgressRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EgressRule parameters for the firewall",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"egressToPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"egressDestination": {
						SchemaProps: spec.SchemaProps{
							Description: "this thing should be a string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"egressProtocol": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Firewall(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Firewall contains the configuration a user expects to be applied.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ingressRules": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.IngressRule"),
									},
								},
							},
						},
					},
					"egressRules": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.EgressRule"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.EgressRule", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.IngressRule", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_HTTPBasicAuth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"username": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_IngressRule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IngressRule parameters for the firewall",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ingressFromPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ingressToPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ingressSource": {
						SchemaProps: spec.SchemaProps{
							Description: "this thing should be a string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ingressProtocol": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_InstancePool(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"minCount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"maxCount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"spotPrice": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bootstrapScripts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"subnets": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Subnet"),
									},
								},
							},
						},
					},
					"firewalls": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Firewall"),
									},
								},
							},
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Volume"),
									},
								},
							},
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePoolKubernetes"),
						},
					},
					"allowCIDRs": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Label"),
									},
								},
							},
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Taint"),
									},
								},
							},
						},
					},
					"amazon": {
						SchemaProps: spec.SchemaProps{
							Description: "Amazon specific settings for that instance pool",
							Ref:         ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePoolAmazon"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Firewall", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePoolAmazon", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InstancePoolKubernetes", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Label", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Subnet", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Taint", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Volume", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_InstancePoolAmazon(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Amazon specific settings for that instance pool",
				Properties: map[string]spec.Schema{
					"additionalIAMPolicies": {
						SchemaProps: spec.SchemaProps{
							Description: "This fields contains ARNs for additional IAM policies to be added to this instance pool",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_InstancePoolKubernetes(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_InternetGW(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_KubernetesAPI(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Label(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Label structure for instancepool node labels",
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_LoggingSink(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"elasticSearch": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.LoggingSinkElasticSearch"),
						},
					},
					"types": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.LoggingSinkElasticSearch"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_LoggingSinkElasticSearch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "https://fluentbit.io/documentation/0.12/output/elasticsearch.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"logstashPrefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tls": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"tlsVerify": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"tlsCA": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"httpBasicAuth": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.HTTPBasicAuth"),
						},
					},
					"amazonESProxy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.AmazonESProxy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.AmazonESProxy", "github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.HTTPBasicAuth"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Network(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"internetGW": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InternetGW"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.InternetGW", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_SSH(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"publicKeyPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"publicKeyData": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
					"publicKeyFingerprint": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"privateKeyPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Shared(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Shared object infor among rules.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Subnet(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"identifier": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"location": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"zone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Taint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Taint structure for instancepool node taints",
				Properties: map[string]spec.Schema{
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"effect": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Values(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"itemMap": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_cluster_v1alpha1_Volume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Volume Size",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_ClusterApplyFlags(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Contains the cluster apply flags",
				Properties: map[string]spec.Schema{
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"infrastructureStacks": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"infrastructureOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "filter stacks to this list",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"configurationOnly": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_ClusterDestroyFlags(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Contains the cluster destroy flags",
				Properties: map[string]spec.Schema{
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"infrastructureStacks": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"forceDestroyStateStack": {
						SchemaProps: spec.SchemaProps{
							Description: "filter stacks to this list",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_ClusterFlags(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "This contains the cluster specifc operation flags",
				Properties: map[string]spec.Schema{
					"apply": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterApplyFlags"),
						},
					},
					"destroy": {
						SchemaProps: spec.SchemaProps{
							Description: "flags for applying clusters",
							Ref:         ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterDestroyFlags"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterApplyFlags", "github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterDestroyFlags"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_Config(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"currentCluster": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"contact": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"clusters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Cluster"),
									},
								},
							},
						},
					},
					"providers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Provider"),
									},
								},
							},
						},
					},
					"environments": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Environment"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.Cluster", "github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Environment", "github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Provider", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_ConfigList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Config"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Config", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_Environment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"provider": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"contact": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"location": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ssh": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.SSH"),
						},
					},
					"privateZone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"adminCIDRs": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/cluster/v1alpha1.SSH", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_EnvironmentList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Environment"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Environment", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_Flags(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "This represents tarmaks global flags",
				Properties: map[string]spec.Schema{
					"verbose": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"configDirectory": {
						SchemaProps: spec.SchemaProps{
							Description: "logrus log level to run with",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keepContainers": {
						SchemaProps: spec.SchemaProps{
							Description: "path to config directory",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"initialize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"currentCluster": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cluster": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterFlags"),
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"wingDevMode": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ClusterFlags"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_Image(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"baseImage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"location": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_Provider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"amazon": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderAmazon"),
						},
					},
					"gcp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderGCP"),
						},
					},
					"azure": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderAzure"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderAmazon", "github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderAzure", "github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.ProviderGCP", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_ProviderAmazon(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"vaultPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"allowedAccountIDs": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"profile": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"bucketPrefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"keyName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"publicZone": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"publicHostedZoneID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_ProviderAzure(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"subscriptionID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_ProviderGCP(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"project": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_tarmak_v1alpha1_ProviderList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Provider"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/tarmak/v1alpha1.Provider", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_wing_v1alpha1_Instance(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"instanceID": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"instancePool": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceSpec", "github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_wing_v1alpha1_InstanceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.Instance"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.Instance", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_wing_v1alpha1_InstanceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceSpec defines the desired state of Instance",
				Properties: map[string]spec.Schema{
					"converge": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceSpecManifest"),
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceSpecManifest"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceSpecManifest"},
	}
}

func schema_pkg_apis_wing_v1alpha1_InstanceSpecManifest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "\n InstaceSpecManifest defines location and hash for a specific manifest",
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hash": {
						SchemaProps: spec.SchemaProps{
							Description: "PATH to manifests (tar.gz)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "hash of manifests, prefixed with type (eg: sha256:xyz)",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_wing_v1alpha1_InstanceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InstanceStatus defines the observed state of Instance",
				Properties: map[string]spec.Schema{
					"converge": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceStatusManifest"),
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceStatusManifest"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/jetstack/tarmak/pkg/apis/wing/v1alpha1.InstanceStatusManifest"},
	}
}

func schema_pkg_apis_wing_v1alpha1_InstanceStatusManifest(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "\n InstaceSpecManifest defines the state and hash of a run manifest",
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hash": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastUpdateTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "hash of manifests, prefixed with type (eg: sha256:xyz)",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"messages": {
						SchemaProps: spec.SchemaProps{
							Description: "timestamp when a converge was requested",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"exitCodes": {
						SchemaProps: spec.SchemaProps{
							Description: "contains output of the retries",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"integer"},
										Format: "int32",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
