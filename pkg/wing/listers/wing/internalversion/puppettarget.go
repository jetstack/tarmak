// Copyright Jetstack Ltd. See LICENSE for details.

// This file was automatically generated by lister-gen

package internalversion

import (
	wing "github.com/jetstack/tarmak/pkg/apis/wing"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PuppetTargetLister helps list PuppetTargets.
type PuppetTargetLister interface {
	// List lists all PuppetTargets in the indexer.
	List(selector labels.Selector) (ret []*wing.PuppetTarget, err error)
	// PuppetTargets returns an object that can list and get PuppetTargets.
	PuppetTargets(namespace string) PuppetTargetNamespaceLister
	PuppetTargetListerExpansion
}

// puppetTargetLister implements the PuppetTargetLister interface.
type puppetTargetLister struct {
	indexer cache.Indexer
}

// NewPuppetTargetLister returns a new PuppetTargetLister.
func NewPuppetTargetLister(indexer cache.Indexer) PuppetTargetLister {
	return &puppetTargetLister{indexer: indexer}
}

// List lists all PuppetTargets in the indexer.
func (s *puppetTargetLister) List(selector labels.Selector) (ret []*wing.PuppetTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*wing.PuppetTarget))
	})
	return ret, err
}

// PuppetTargets returns an object that can list and get PuppetTargets.
func (s *puppetTargetLister) PuppetTargets(namespace string) PuppetTargetNamespaceLister {
	return puppetTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PuppetTargetNamespaceLister helps list and get PuppetTargets.
type PuppetTargetNamespaceLister interface {
	// List lists all PuppetTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*wing.PuppetTarget, err error)
	// Get retrieves the PuppetTarget from the indexer for a given namespace and name.
	Get(name string) (*wing.PuppetTarget, error)
	PuppetTargetNamespaceListerExpansion
}

// puppetTargetNamespaceLister implements the PuppetTargetNamespaceLister
// interface.
type puppetTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PuppetTargets in the indexer for a given namespace.
func (s puppetTargetNamespaceLister) List(selector labels.Selector) (ret []*wing.PuppetTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*wing.PuppetTarget))
	})
	return ret, err
}

// Get retrieves the PuppetTarget from the indexer for a given namespace and name.
func (s puppetTargetNamespaceLister) Get(name string) (*wing.PuppetTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(wing.Resource("puppettarget"), name)
	}
	return obj.(*wing.PuppetTarget), nil
}
