// Copyright Jetstack Ltd. See LICENSE for details.

// This file was automatically generated by lister-gen

package internalversion

import (
	wing "github.com/jetstack/tarmak/pkg/apis/wing"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WingJobLister helps list WingJobs.
type WingJobLister interface {
	// List lists all WingJobs in the indexer.
	List(selector labels.Selector) (ret []*wing.WingJob, err error)
	// WingJobs returns an object that can list and get WingJobs.
	WingJobs(namespace string) WingJobNamespaceLister
	WingJobListerExpansion
}

// wingJobLister implements the WingJobLister interface.
type wingJobLister struct {
	indexer cache.Indexer
}

// NewWingJobLister returns a new WingJobLister.
func NewWingJobLister(indexer cache.Indexer) WingJobLister {
	return &wingJobLister{indexer: indexer}
}

// List lists all WingJobs in the indexer.
func (s *wingJobLister) List(selector labels.Selector) (ret []*wing.WingJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*wing.WingJob))
	})
	return ret, err
}

// WingJobs returns an object that can list and get WingJobs.
func (s *wingJobLister) WingJobs(namespace string) WingJobNamespaceLister {
	return wingJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WingJobNamespaceLister helps list and get WingJobs.
type WingJobNamespaceLister interface {
	// List lists all WingJobs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*wing.WingJob, err error)
	// Get retrieves the WingJob from the indexer for a given namespace and name.
	Get(name string) (*wing.WingJob, error)
	WingJobNamespaceListerExpansion
}

// wingJobNamespaceLister implements the WingJobNamespaceLister
// interface.
type wingJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WingJobs in the indexer for a given namespace.
func (s wingJobNamespaceLister) List(selector labels.Selector) (ret []*wing.WingJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*wing.WingJob))
	})
	return ret, err
}

// Get retrieves the WingJob from the indexer for a given namespace and name.
func (s wingJobNamespaceLister) Get(name string) (*wing.WingJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(wing.Resource("wingjob"), name)
	}
	return obj.(*wing.WingJob), nil
}
