# This manifest deploys the Calico policy controller on Kubernetes.
# See https://github.com/projectcalico/k8s-policy
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-policy-controller
  namespace: <%= @namespace %>
  labels:
    k8s-app: calico-policy
    addonmanager.kubernetes.io/mode: "Reconcile"
spec:
  # The policy controller can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-policy-controller
      labels:
        k8s-app: calico-policy
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
<%- if @version_before_1_6 -%>
        scheduler.alpha.kubernetes.io/tolerations: |
          [
            {"key": "dedicated", "value": "master", "effect": "NoSchedule" },
            {"key": "CriticalAddonsOnly", "operator":"Exists"},
            {"key": "node-role.kubernetes.io/master", "effect": "NoSchedule"}
          ]
<%- end -%>
    spec:
<%- if @rbac_enabled -%>
      serviceAccountName: calico-policy-controller
<%- end -%>
<%- unless @version_before_1_6 -%>
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      - key: "dedicated"
        value: "master"
        effect: "NoSchedule"
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
<%- end -%>
      # The policy controller must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      containers:
        - name: calico-policy-controller
          image: <%= @image %>:v<%= @version %>
          env:
<% if @backend == 'etcd' -%>
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,profile,workloadendpoint,node
<% if @tls -%>
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
<% end -%>
<% end -%>
            # The location of the Kubernetes API.  Use the default Kubernetes
            # service for API access.
            - name: K8S_API
              value: "https://kubernetes.default:443"
            # Since we're running in the host namespace and might not have KubeDNS
            # access, configure the container's /etc/hosts to resolve
            # kubernetes.default to the correct service clusterIP.
            - name: CONFIGURE_ETC_HOSTS
              value: "true"
<% if @tls and @backend == 'etcd' -%>
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: <%= @etcd_tls_dir %>
              name: etcd-certs
      volumes:
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          hostPath:
            path: <%= @etcd_tls_dir %>
<% end -%>
