{{/* vim: set ft=tf: */}}
{{ $instancePool := . -}}

resource "aws_iam_role" "{{.TFName}}" {
  name               = "${data.template_file.stack_name.rendered}.{{.TFName}}"
  path               = "/"
  assume_role_policy = "${file("${path.module}/templates/role.json")}"
}

resource "aws_iam_instance_profile" "{{.TFName}}" {
  name = "${data.template_file.stack_name.rendered}.{{.TFName}}"
  role = "${aws_iam_role.{{.TFName}}.name}"
}

{{ if .Role.AWS.IAMEC2Controller -}}
resource "aws_iam_role_policy_attachment" "{{.TFName}}_ec2_controller" {
  role       = "${aws_iam_role.{{.TFName}}.name}"
  policy_arn = "${aws_iam_policy.ec2_controller.arn}"
}

{{ end -}}
{{ if .Role.AWS.IAMEC2Read -}}
resource "aws_iam_role_policy_attachment" "{{.TFName}}_ec2_read" {
  role       = "${aws_iam_role.{{.TFName}}.name}"
  policy_arn = "${aws_iam_policy.ec2_read.arn}"
}

{{ end -}}
{{ if .Role.AWS.IAMClusterAutoscaler -}}
resource "aws_iam_role_policy_attachment" "{{.TFName}}_cluster_autoscaler" {
  role       = "${aws_iam_role.{{.TFName}}.name}"
  policy_arn = "${aws_iam_policy.cluster_autoscaler.arn}"
}

{{ end -}}
{{ if .Role.AWS.IAMELBController -}}
resource "aws_iam_role_policy_attachment" "{{.TFName}}_elb_controller" {
  role       = "${aws_iam_role.{{.TFName}}.name}"
  policy_arn = "${aws_iam_policy.elb_controller.arn}"
}
{{ end -}}

{{ if .Role.AWS.IAMEC2ModifyInstanceAttributes -}}
resource "aws_iam_role_policy_attachment" "{{.TFName}}_ec2_modify_instance_attribute" {
  role       = "${aws_iam_role.{{.TFName}}.name}"
  policy_arn = "${aws_iam_policy.ec2_modify_instance_attribute.arn}"
}
{{ end }}

{{ if .Role.Stateful -}}
# Allow attachment/detachment of volumes
{{ range .Volumes -}}

data "template_file" "iam_{{$instancePool.TFName}}_ebs_attach_{{.Name}}" {
  template = "$${ebs_volume_arns}"

  vars {
    ebs_volume_arns = "${jsonencode(formatlist("arn:aws:ec2:%s:%s:%s", var.region, data.aws_caller_identity.current.account_id, concat(formatlist("volume/%s", aws_ebs_volume.{{$instancePool.TFName}}_{{.Name}}.*.id), list("instance/*"))))}"
  }
}


resource "aws_iam_policy" "{{$instancePool.TFName}}_ec2_ebs_attach_{{.Name}}" {
  name        = "${data.template_file.stack_name.rendered}-{{$instancePool.DNSName}}"
  description = "Allows {{$instancePool.TFName}} nodes to attach/detach EBS volumes"

  policy      = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:AttachVolume",
        "ec2:DetachVolume"
      ],
      "Resource": ${data.template_file.iam_{{$instancePool.TFName}}_ebs_attach_{{.Name}}.rendered}
    },
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeVolumes"
      ],
      "Resource": [
        "*"
      ]
    }
  ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "{{$instancePool.TFName}}_ec2_ebs_attach_{{.Name}}" {
  role       = "${aws_iam_role.{{$instancePool.TFName}}.name}"
  policy_arn = "${aws_iam_policy.{{$instancePool.TFName}}_ec2_ebs_attach_{{.Name}}.arn}"
}
{{ end -}}
{{ end -}}

{{ if eq .Name "etcd" -}}
resource "aws_iam_role_policy" "etcd_backup_bucket_write" {
  name   = "${data.template_file.stack_name.rendered}-etcd-${count.index+1}"
  count  = "${var.{{.TFName}}_min_count}"
  role   = "${aws_iam_role.{{.TFName}}.name}"
  policy = "${element(data.template_file.etcd_backup_bucket_write_policy.*.rendered, count.index)}"
}

data "template_file" "etcd_backup_bucket_write_policy" {
  template = "${file("${path.module}/templates/iam_etcd_backup_bucket_write.json")}"
  count    = "${var.{{.TFName}}_min_count}"

  vars {
    backup_bucket_prefix = "${var.backups_bucket}/${data.template_file.stack_name.rendered}-etcd-${count.index+1}"
    backup_bucket        = "${var.backups_bucket}"
    vault_kms_key_id     = "${var.vault_kms_key_id}"
  }
}
{{ end -}}

{{ if ne .Name "jenkins" -}}
resource "aws_iam_role_policy_attachment" "{{.TFName}}_ecr_read" {
  role       = "${aws_iam_role.{{.TFName}}.name}"
  policy_arn = "${aws_iam_policy.ecr_read.arn}"
}

resource "aws_iam_role_policy_attachment" "{{.TFName}}_tarmak_bucket_read" {
  role       = "${aws_iam_role.{{.TFName}}.name}"
  policy_arn = "${aws_iam_policy.tarmak_bucket_read.arn}"
}

resource "aws_iam_role_policy_attachment" "{{.TFName}}_additional_policy" {
  count      = "${length(var.{{.TFName}}_iam_additional_policy_arns)}"
  role       = "${aws_iam_role.{{.TFName}}.name}"
  policy_arn = "${element(var.{{.TFName}}_iam_additional_policy_arns, count.index)}"
}
{{ end -}}
