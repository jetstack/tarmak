{{/* vim: set ft=tf: */ -}}

data "template_file" "vault" {
  template = "${file("${path.module}/templates/puppet_agent_user_data.yaml")}"
  count    = "${var.vault_min_instance_count}"

  vars {
    fqdn           = "vault-${count.index + 1}.${var.private_zone}"
    region         = "${var.region}"
    instance_count = "${var.vault_min_instance_count}"
    volume_id      = "${element(aws_ebs_volume.vault.*.id, count.index)}"
    private_ip     = "${cidrhost(element(var.private_subnets, count.index % length(var.availability_zones)),(10 + (count.index/length(var.availability_zones))))}"

    tarmak_dns_root      = "${var.private_zone}"
    tarmak_hostname      = "vault-${count.index+1}"
    tarmak_cluster       = "${data.template_file.stack_name.rendered}"
    tarmak_environment   = "${var.environment}"
    tarmak_instance_pool = "{{.VaultInstancePool.Name}}"

    # We need to convert to the default base64 alphabet
    consul_encrypt      = "${replace(replace(random_id.consul_encrypt.b64,"-","+"),"_","/")}=="
    consul_version      = "${var.consul_version}"
    consul_master_token = "${random_id.consul_master_token.hex}"

    vault_version       = "${var.vault_version}"
    vault_tls_cert_path = "s3://${var.secrets_bucket}/${element(aws_s3_bucket_object.node-certs.*.key, count.index)}"
    vault_tls_key_path  = "s3://${var.secrets_bucket}/${element(aws_s3_bucket_object.node-keys.*.key, count.index)}"
    vault_tls_ca_path   = "s3://${var.secrets_bucket}/${aws_s3_bucket_object.ca-cert.key}"

    vault_unsealer_kms_key_id     = "${var.vault_kms_key_id}"
    vault_unsealer_ssm_key_prefix = "${local.vault_unseal_key_name}"

    backup_bucket_prefix = "${var.backups_bucket}/${data.template_file.stack_name.rendered}-vault-${count.index+1}"

    # run backup once per instance spread throughout the day
    backup_schedule = "*-*-* ${format("%02d",count.index * (24/var.vault_min_instance_count))}:00:00"

    puppet_tar_gz_bucket_dir = "${var.secrets_bucket}/${data.template_file.stack_name.rendered}/puppet-manifests"

    # These are only used in the template when running in Wing dev mode
    wing_binary_path = "${var.secrets_bucket}/${var.wing_binary_path}"
    wing_version     = "${var.wing_version}"
  }
}

resource "aws_cloudwatch_metric_alarm" "vault-autorecover" {
  count               = "${var.vault_min_instance_count}"
  alarm_name          = "vault-autorecover-${var.environment}-${count.index+1}"
  namespace           = "AWS/EC2"
  evaluation_periods  = "2"
  period              = "60"
  alarm_description   = "This metric auto recovers Vault instances for the ${var.environment} cluster"
  alarm_actions       = ["arn:aws:automate:${var.region}:ec2:recover"]
  statistic           = "Minimum"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  threshold           = "1"
  metric_name         = "StatusCheckFailed_System"

  dimensions {
    InstanceId = "${element(aws_instance.vault.*.id, count.index)}"
  }
}

data "tarmak_bastion_instance" "bastion" {
  hostname    = "bastion"
  username    = "centos"
  instance_id = "${var.bastion_instance_id}"
}

resource "aws_instance" "vault" {
  ami                  = "${var.vault_ami}"
  instance_type        = "${var.vault_instance_type}"
  key_name             = "${var.key_name}"
  subnet_id            = "${element(var.private_subnet_ids, count.index % length(var.availability_zones))}"
  count                = "${var.vault_min_instance_count}"
  user_data            = "${element(data.template_file.vault.*.rendered, count.index)}"
  iam_instance_profile = "${element(aws_iam_instance_profile.vault.*.name, count.index)}"
  private_ip           = "${cidrhost(element(var.private_subnets, count.index % length(var.availability_zones)),(10 + (count.index/length(var.availability_zones))))}"

  vpc_security_group_ids = [
    "${aws_security_group.vault.0.id}",
  ]

  root_block_device = {
    volume_type = "gp2"
    volume_size = "${var.vault_root_size}"
  }

  tags {
    Environment  = "${var.environment}"
    Project      = "${var.project}"
    Contact      = "${var.contact}"
    VaultCluster = "${var.environment}"
  }

  depends_on = ["data.tarmak_bastion_instance.bastion", "aws_iam_policy_attachment.vault_tarmak_bucket_read"]

  lifecycle {
    ignore_changes = ["volume_tags"]
    ignore_changes = ["tags"]
  }
}

resource "awstag_ec2_tag" "Name" {
  ec2_id = "${element(aws_instance.vault.*.id, count.index)}"
  key    = "Name"
  value  = "${data.template_file.stack_name.rendered}-vault-${count.index+1}"
  count  = "${var.vault_min_instance_count}"
}

resource "awstag_ec2_tag" "tarmak_role" {
  ec2_id = "${element(aws_instance.vault.*.id, count.index)}"
  key    = "tarmak_role"
  value  = "vault-${count.index+1}"
  count  = "${var.vault_min_instance_count}"
}

resource "aws_ebs_volume" "vault" {
  count             = "${var.vault_min_instance_count}"
  size              = "${var.vault_data_size}"
  availability_zone = "${element(var.availability_zones, count.index % length(var.availability_zones))}"
  encrypted         = "{{.AmazonEBSEncrypted}}"

  tags {
    Name        = "${data.template_file.stack_name.rendered}-vault-${count.index+1}"
    Environment = "${var.environment}"
    Project     = "${var.project}"
    Contact     = "${var.contact}"
  }

  lifecycle = {
    #prevent_destroy = true
  }
}
{{ if eq .ClusterType .ClusterTypeHub }}
resource "tarmak_vault_cluster" "vault" {
  internal_fqdns        = ["${aws_route53_record.per-instance.*.fqdn}"]
  vault_ca              = "${element(concat(tls_self_signed_cert.ca.*.cert_pem, list("")), 0)}"
  vault_kms_key_id      = "${var.vault_kms_key_id}"
  vault_unseal_key_name = "${local.vault_unseal_key_name}"

  depends_on = ["aws_instance.vault"]
}
{{ end -}}
