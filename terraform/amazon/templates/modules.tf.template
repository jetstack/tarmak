{{ if or (eq .ClusterType .ClusterTypeClusterSingle) (eq .ClusterType .ClusterTypeHub) -}}
module "state" {
  source = "modules/state"

  name                = "${var.name}"
  project             = "${var.project}"
  contact             = "${var.contact}"
  region              = "${var.region}"
  availability_zones  = "${var.availability_zones}"
  stack               = "${var.stack}"
  public_zone         = "${var.public_zone}"
  public_zone_id      = "${var.public_zone_id}"
  state_bucket        = "${var.state_bucket}"
  stack_name_prefix   = "${var.stack_name_prefix}"
  allowed_account_ids = "${var.allowed_account_ids}"
  environment         = "${var.environment}"
  bucket_prefix       = "${var.bucket_prefix}"
}

module "network" {
{{- if .ExistingVPC }}
  source = "modules/network-existing-vpc"

  public_subnets  = "${var.public_subnets}"
  private_subnets = "${var.private_subnets}"
  vpc_id          = "${var.vpc_id}"
{{- else }}
  source = "modules/network"

  route_table_public_ids  = ["${var.route_table_public_ids}"]
  route_table_private_ids = ["${var.route_table_private_ids}"]
  peer_vpc_id             = "${var.peer_vpc_id}"
  vpc_net                 = "${var.vpc_net}"
{{- end }}

  network             = "${var.network}"
  name                = "${var.name}"
  project             = "${var.project}"
  contact             = "${var.contact}"
  region              = "${var.region}"
  availability_zones  = ["${var.availability_zones}"]
  stack               = "${var.stack}"
  state_bucket        = "${var.state_bucket}"
  stack_name_prefix   = "${var.stack_name_prefix}"
  allowed_account_ids = ["${var.allowed_account_ids}"]
  vpc_peer_stack      = "${var.vpc_peer_stack}"
  environment         = "${var.environment}"
  private_zone        = "${var.private_zone}"
  state_cluster_name  = "${var.state_cluster_name}"
  private_zone_id     = "${var.private_zone_id}"
}

module "bastion" {
  source = "modules/bastion"

  public_zone           = "${module.state.public_zone}"
  environment           = "${var.environment}"
  stack_name_prefix     = "${var.stack_name_prefix}"
  name                  = "${var.name}"
  vpc_id                = "${module.network.vpc_id}"
  project               = "${var.project}"
  contact               = "${var.contact}"
  bastion_ami           = "${var.bastion_ami}"
  bastion_instance_type = "${var.bastion_instance_type}"
  public_subnet_ids     = ["${module.network.public_subnet_ids}"]
  key_name              = "${var.key_name}"
  bastion_root_size     = "${var.bastion_root_size}"
  bastion_admin_cidrs   = ["${var.bastion_admin_cidrs}"]
  public_zone_id        = "${module.state.public_zone_id}"
  private_zone_id       = "${module.network.private_zone_id[0]}"
  secrets_bucket        = "${module.state.secrets_bucket[0]}"

  bastion_min_instance_count         = "${var.bastion_min_instance_count}"
  bastion_iam_additional_policy_arns = ["${var.bastion_iam_additional_policy_arns}"]
}

{{ if .JenkinsInstall -}}
module "jenkins" {
  source = "modules/jenkins"

  vpc_id                    = "${module.network.vpc_id}"
  environment               = "${var.environment}"
  project                   = "${var.project}"
  contact                   = "${var.contact}"
  bastion_security_group_id = "${module.bastion.bastion_security_group_id}"
  region                    = "${var.region}"
  private_zone              = "${var.private_zone}"
  private_zone_id           = "${module.network.private_zone_id[0]}"
  jenkins_ami               = "${var.jenkins_ami}"
  public_subnet_ids         = ["${module.network.public_subnet_ids}"]
  private_subnet_ids        = ["${module.network.private_subnet_ids}"]
  key_name                  = "${var.key_name}"
  jenkins_root_size         = "${var.jenkins_root_size}"
  jenkins_ebs_size          = "${var.jenkins_ebs_size}"
  certificate_arn           = "${var.jenkins_certificate_arn}"
  jenkins_admin_cidrs       = "${var.jenkins_admin_cidrs}"
  public_zone_id            = "${module.state.public_zone_id}"
  stack_name_prefix         = "${var.stack_name_prefix}"
  availability_zones        = ["${var.availability_zones}"]
  name                      = "${var.name}"
}

{{ end -}}

module "vault" {
  source = "modules/vault"

  name                      = "${var.name}"
  stack                     = "${var.stack}"
  project                   = "${var.project}"
  contact                   = "${var.contact}"
  key_name                  = "${var.key_name}"
  region                    = "${var.region}"
  vault_ami                 = "${var.vault_ami}"
  state_bucket              = "${var.state_bucket}"
  stack_name_prefix         = "${var.stack_name_prefix}"
  allowed_account_ids       = "${var.allowed_account_ids}"
  environment               = "${var.environment}"
  consul_version            = "${var.consul_version}"
  vault_version             = "${var.vault_version}"
  vault_root_size           = "${var.vault_root_size}"
  vault_data_size           = "${var.vault_data_size}"
  vault_min_instance_count  = "${var.vault_min_instance_count}"
  vault_instance_type       = "${var.vault_instance_type}"
  state_cluster_name        = "${var.state_cluster_name}"
  private_zone              = "${module.network.private_zone[0]}"
  private_zone_id           = "${module.network.private_zone_id[0]}"
  secrets_bucket            = "${module.state.secrets_bucket[0]}"
  secrets_kms_arn           = "${module.state.secrets_kms_arn[0]}"
  backups_bucket            = "${module.state.backups_bucket[0]}"
  private_subnet_ids        = ["${module.network.private_subnet_ids}"]
  private_subnets           = ["${module.network.private_subnets}"]
  availability_zones        = ["${var.availability_zones}"]
  bastion_security_group_id = "${module.bastion.bastion_security_group_id}"
  vpc_id                    = "${module.network.vpc_id}"
  bastion_instance_id       = "${module.bastion.bastion_instance_id}"
  vault_cluster_name        = "${var.vault_cluster_name}"

  vault_iam_additional_policy_arns = ["${var.vault_iam_additional_policy_arns}"]
}
{{- end -}}

{{- if eq .ClusterType .ClusterTypeClusterSingle }}

module "kubernetes" {
  source = "modules/kubernetes"

  name                = "${var.name}"
  project             = "${var.project}"
  contact             = "${var.contact}"
  key_name            = "${var.key_name}"
  region              = "${var.region}"
  stack               = "${var.stack}"
  state_bucket        = "${var.state_bucket}"
  stack_name_prefix   = "${var.stack_name_prefix}"
  allowed_account_ids = "${var.allowed_account_ids}"
  environment         = "${var.environment}"
  state_cluster_name  = "${var.state_cluster_name}"
  vault_cluster_name  = "${var.vault_cluster_name}"
  tools_cluster_name  = "${var.tools_cluster_name}"
{{ range .InstancePools -}}
{{- if or (eq .Role.Name "etcd") ( or (eq .Role.Name "worker") (eq .Role.Name "master") ) }}
  {{.TFName}}_ami              = "${var.{{.TFName}}_ami}"
  {{.TFName}}_root_volume_size = "${var.{{.TFName}}_root_volume_size}"
  {{.TFName}}_root_volume_type = "${var.{{.TFName}}_root_volume_type}"
{{ end -}}
{{- end }}
  api_admin_cidrs       = "${var.api_admin_cidrs}"
  secrets_bucket        = "${module.state.secrets_bucket[0]}"
  private_subnet_ids    = ["${module.network.private_subnet_ids}"]
  public_subnet_ids     = ["${module.network.public_subnet_ids}"]
  internal_fqdns        = ["${module.vault.instance_fqdns}"]
  vault_kms_key_id      = "${module.vault.vault_kms_key_id}"
  vault_unseal_key_name = "${module.vault.vault_unseal_key_name}"

  # template variables
  availability_zones        = ["${module.network.availability_zones}"]
  vpc_id                    = "${module.network.vpc_id}"
  private_zone_id           = "${module.network.private_zone_id[0]}"
  private_zone              = "${module.network.private_zone[0]}"
  vault_ca                  = "${module.vault.vault_ca}"
  vault_url                 = "${module.vault.vault_url}"
  public_zone               = "${module.state.public_zone}"
  public_zone_id            = "${module.state.public_zone_id}"
  vault_security_group_id   = "${module.vault.vault_security_group_id}"
  bastion_security_group_id = "${module.bastion.bastion_security_group_id}"

  elb_access_logs_public_enabled           = "${var.elb_access_logs_public_enabled}"
  elb_access_logs_public_bucket            = "${var.elb_access_logs_public_bucket}"
  elb_access_logs_public_bucket_prefix     = "${var.elb_access_logs_public_bucket_prefix}"
  elb_access_logs_public_bucket_interval   = "${var.elb_access_logs_public_bucket_interval}"
  elb_access_logs_internal_enabled         = "${var.elb_access_logs_internal_enabled}"
  elb_access_logs_internal_bucket          = "${var.elb_access_logs_internal_bucket}"
  elb_access_logs_internal_bucket_prefix   = "${var.elb_access_logs_internal_bucket_prefix}"
  elb_access_logs_internal_bucket_interval = "${var.elb_access_logs_internal_bucket_interval}"

  backups_bucket = "${module.state.backups_bucket[0]}"
}
{{- end -}}

{{- if eq .ClusterType .ClusterTypeClusterMulti -}}
data "terraform_remote_state" "hub_state" {
  backend = "s3"

  config {
    region     = "${var.region}"
    bucket     = "${var.state_bucket}"
    key        = "${var.environment}/${var.state_cluster_name}/main.tfstate"
    kms_key_id = "${var.remote_kms_key_id}"
    encrypt    = "true"
  }
}

module "kubernetes" {
  source = "modules/kubernetes"

  name                = "${var.name}"
  project             = "${var.project}"
  contact             = "${var.contact}"
  key_name            = "${var.key_name}"
  region              = "${var.region}"
  stack               = "${var.stack}"
  state_bucket        = "${var.state_bucket}"
  stack_name_prefix   = "${var.stack_name_prefix}"
  allowed_account_ids = "${var.allowed_account_ids}"
  environment         = "${var.environment}"
  state_cluster_name  = "${var.state_cluster_name}"
  vault_cluster_name  = "${var.vault_cluster_name}"
  tools_cluster_name  = "${var.tools_cluster_name}"
{{ range .InstancePools -}}
{{- if or (eq .Role.Name "etcd") ( or (eq .Role.Name "worker") (eq .Role.Name "master") )}}
  {{.TFName}}_ami              = "${var.{{.TFName}}_ami}"
  {{.TFName}}_root_volume_size = "${var.{{.TFName}}_root_volume_size}"
  {{.TFName}}_root_volume_type = "${var.{{.TFName}}_root_volume_type}"
{{ end -}}
{{- end }}
  api_admin_cidrs           = "${var.api_admin_cidrs}"
  bastion_security_group_id = "${data.terraform_remote_state.hub_state.bastion_bastion_security_group_id}"
  secrets_bucket            = "${data.terraform_remote_state.hub_state.state_secrets_bucket}"
  public_zone               = "${data.terraform_remote_state.hub_state.state_public_zone}"
  public_zone_id            = "${data.terraform_remote_state.hub_state.state_public_zone_id}"
  private_subnet_ids        = ["${data.terraform_remote_state.hub_state.network_private_subnet_ids}"]
  public_subnet_ids         = ["${data.terraform_remote_state.hub_state.network_public_subnet_ids}"]
  availability_zones        = ["${data.terraform_remote_state.hub_state.network_availability_zones}"]
  vpc_id                    = "${data.terraform_remote_state.hub_state.network_vpc_id}"
  private_zone_id           = "${data.terraform_remote_state.hub_state.network_private_zone_id}"
  private_zone              = "${data.terraform_remote_state.hub_state.network_private_zone}"
  internal_fqdns            = ["${data.terraform_remote_state.hub_state.vault_instance_fqdns}"]
  vault_kms_key_id          = "${data.terraform_remote_state.hub_state.vault_vault_kms_key_id}"
  vault_unseal_key_name     = "${data.terraform_remote_state.hub_state.vault_vault_unseal_key_name}"
  vault_ca                  = "${data.terraform_remote_state.hub_state.vault_vault_ca}"
  vault_url                 = "${data.terraform_remote_state.hub_state.vault_vault_url}"
  vault_security_group_id   = "${data.terraform_remote_state.hub_state.vault_vault_security_group_id}"

  elb_access_logs_public_enabled           = "${var.elb_access_logs_public_enabled}"
  elb_access_logs_public_bucket            = "${var.elb_access_logs_public_bucket}"
  elb_access_logs_public_bucket_prefix     = "${var.elb_access_logs_public_bucket_prefix}"
  elb_access_logs_public_bucket_interval   = "${var.elb_access_logs_public_bucket_interval}"
  elb_access_logs_internal_enabled         = "${var.elb_access_logs_internal_enabled}"
  elb_access_logs_internal_bucket          = "${var.elb_access_logs_internal_bucket}"
  elb_access_logs_internal_bucket_prefix   = "${var.elb_access_logs_internal_bucket_prefix}"
  elb_access_logs_internal_bucket_interval = "${var.elb_access_logs_internal_bucket_interval}"

  backups_bucket = "${data.terraform_remote_state.hub_state.state_backups_bucket[0]}"
}
{{- end }}
